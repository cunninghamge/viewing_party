---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/503919/reviews?api_key=<TMDB_API_KEY>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Wed, 10 Feb 2021 04:17:32 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=21600
      X-Memc:
      - HIT
      X-Memc-Key:
      - eb72a63a368ffdea0f5c8918ae995c818a21fde6
      X-Memc-Age:
      - '19419'
      X-Memc-Expires:
      - '2181'
      Etag:
      - W/"46ab9ab1e38599b14f19e1a7d4bc26ed"
      Last-Modified:
      - Wed, 10 Feb 2021 04:17:32 GMT
      Vary:
      - Accept-Encoding
      X-Cache:
      - Hit from cloudfront
      Via:
      - 1.1 91f1c114eac2b00f07286bc49dddd7e5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - DEN50-C2
      X-Amz-Cf-Id:
      - fa5LKM5q_n4wsYZtFYXDF_XL1Q9mPYYSfutChzeqQ7gZ8GKjcFet6g==
      Age:
      - '287'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 10 Feb 2021 04:22:20 GMT
recorded_with: VCR 6.0.0
